@inject UtilityService UtilityService

@inject ContextMenuService ContextMenuService

<div class="m-auto"   @oncontextmenu=@(ShowTestSelectContextMenu) @oncontextmenu:preventDefault="true">
    <div class="animation-div animate m-auto" style="@GenGradientBackground()"></div>
</div>

@code {

    [Parameter]
    public string TestUrl { get; set; }

    [Parameter]
    public TestUrlResult HealthStatus { get; set; } = TestUrlResult.Unknown;

    [Parameter]
    public bool Compact { get; set; }

    [Parameter]
    public TestType TestType { get; set; } = TestType.PingOnly;

    string _uColour1 = "rgb(209, 221, 200)", _uColour2 = "rgb(100, 102, 97)";

    string _pColour1 = "rgb(236, 178, 68)", _pColour2 = "rgb(254, 251, 0)";

    string _hColour1 = "rgb(114, 255, 0)", _hColour2 = "rgb(7, 140, 0)";

    string _fColour1 = "rgb(255,193,90)", _fColour2 = "rgb(242, 87, 87)";

    string GenGradientBackground()
    {
        StringBuilder style = new StringBuilder();


        string colour1 = string.Empty, colour2 = string.Empty;

        switch (HealthStatus)
        {
            case TestUrlResult.Unknown: { colour1 = _uColour1; colour2 = _uColour2; } break;
            case TestUrlResult.Pending: { colour1 = _pColour1; colour2 = _pColour2; } break;
            case TestUrlResult.Passed: { colour1 = _hColour1; colour2 = _hColour2; } break;
            case TestUrlResult.Failed: { colour1 = _fColour1; colour2 = _fColour2; } break;
        }

        style.AppendLine($"background: linear-gradient(180deg, {colour1}, {colour2});");
        style.AppendLine($"background-size: 250% 250%;"); // Required even though static or animation won't trigger

        return style.ToString();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(TestUrl))
        {
            await RunTest();
        }
    }

    private async Task RunTest()
    {
        if (HealthStatus != TestUrlResult.Pending)
        {
            HealthStatus = TestUrlResult.Pending;
            this.StateHasChanged();

            var result = await UtilityService.TestUrlAsync( TestUrl, TestType == TestType.PingOnly );
            if (result.IsSuccessStatusCode && result.Content != null)
            {
                HealthStatus = result.Content.TestUrlResult;
            }
            else
            {
                HealthStatus = TestUrlResult.Failed;
            }

            this.StateHasChanged();
        }
    }

    void ShowTestSelectContextMenu(MouseEventArgs args) => ContextMenuService.Open(args, _ =>
        @<RadzenMenu Click="OnTestModeSelected">
            <RadzenMenuItem Text="@("Ping Only " + (TestType == TestType.PingOnly ? "(selected)" : "") + "")" Value="TestType.PingOnly"></RadzenMenuItem>
            <RadzenMenuItem Text="@("Rest Only " + (TestType == TestType.RestOnly ? "(selected)" : "") + "")" Value="TestType.RestOnly"></RadzenMenuItem>
            <RadzenMenuItem Text="@("Run All Tests " + (TestType == TestType.All ? "(selected)" : "") + "")" Value="@TestType.All" ></RadzenMenuItem>
        </RadzenMenu>);
            
    async Task OnTestModeSelected(MenuItemEventArgs args)
    {
        if (HealthStatus != TestUrlResult.Pending)
        {
            HealthStatus = TestUrlResult.Unknown;
            var selection = (TestType)args.Value;

            TestType = selection;

            await RunTest();
            ContextMenuService.Close();
        }
    }
}
