// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockDoor.Data.Contexts;

#nullable disable

namespace Mockdoor.Data.Sqlite.Migrations
{
    [DbContext(typeof(MockDoorMainContext))]
    [Migration("20221216200447_IncreaseHeaderNameSize")]
    partial class IncreaseHeaderNameSize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.9");

            modelBuilder.Entity("MockDoor.Data.Models.Headers.RequestHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<int>("ServiceRequestID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ServiceRequestID");

                    b.ToTable("RequestHeaders");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Headers.ResponseHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MockResponseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MockResponseID");

                    b.ToTable("ResponseHeaders");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Headers.ServiceHeader", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Incoming")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MicroserviceID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Outgoing")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MicroserviceID");

                    b.ToTable("ServiceHeaders");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Microservice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FakeDelay")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeadersMode")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("PassThroughTenant")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ProxyMode")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("RandomiseMockResult")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceGroupID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SimulateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("TargetUrl")
                        .HasMaxLength(450)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ServiceGroupID");

                    b.ToTable("Microservices");
                });

            modelBuilder.Entity("MockDoor.Data.Models.MockResponse", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Body")
                        .HasColumnType("TEXT");

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Encoding")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Latency")
                        .HasColumnType("TEXT");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("MockResponses");
                });

            modelBuilder.Entity("MockDoor.Data.Models.QueryParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceRequestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ServiceRequestId");

                    b.ToTable("QueryParameters");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("DefaultHealthCheckUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SimulateTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TenantID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("TenantID");

                    b.ToTable("ServiceGroups");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceRequest", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Enabled")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExactUrlMatch")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ExpectAuthHeader")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FromBody")
                        .HasColumnType("TEXT");

                    b.Property<string>("FromUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<int>("MicroserviceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MockBehaviour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("SimulateTime")
                        .HasColumnType("TEXT");

                    b.Property<long?>("TTLTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("MicroserviceID");

                    b.ToTable("ServiceRequests");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Tenant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("SimulateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("Path")
                        .IsUnique();

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Headers.RequestHeader", b =>
                {
                    b.HasOne("MockDoor.Data.Models.ServiceRequest", null)
                        .WithMany("RequestHeaders")
                        .HasForeignKey("ServiceRequestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MockDoor.Data.Models.Headers.ResponseHeader", b =>
                {
                    b.HasOne("MockDoor.Data.Models.MockResponse", null)
                        .WithMany("Headers")
                        .HasForeignKey("MockResponseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MockDoor.Data.Models.Headers.ServiceHeader", b =>
                {
                    b.HasOne("MockDoor.Data.Models.Microservice", null)
                        .WithMany("Headers")
                        .HasForeignKey("MicroserviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MockDoor.Data.Models.Microservice", b =>
                {
                    b.HasOne("MockDoor.Data.Models.ServiceGroup", "ServiceGroup")
                        .WithMany("Microservices")
                        .HasForeignKey("ServiceGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceGroup");
                });

            modelBuilder.Entity("MockDoor.Data.Models.MockResponse", b =>
                {
                    b.HasOne("MockDoor.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("MockResponses")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("MockDoor.Data.Models.QueryParameter", b =>
                {
                    b.HasOne("MockDoor.Data.Models.ServiceRequest", "ServiceRequest")
                        .WithMany("QueryParameters")
                        .HasForeignKey("ServiceRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceRequest");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceGroup", b =>
                {
                    b.HasOne("MockDoor.Data.Models.Tenant", "Tenant")
                        .WithMany("ServiceGroups")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceRequest", b =>
                {
                    b.HasOne("MockDoor.Data.Models.Microservice", "Microservice")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("MicroserviceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Microservice");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Microservice", b =>
                {
                    b.Navigation("Headers");

                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("MockDoor.Data.Models.MockResponse", b =>
                {
                    b.Navigation("Headers");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceGroup", b =>
                {
                    b.Navigation("Microservices");
                });

            modelBuilder.Entity("MockDoor.Data.Models.ServiceRequest", b =>
                {
                    b.Navigation("MockResponses");

                    b.Navigation("QueryParameters");

                    b.Navigation("RequestHeaders");
                });

            modelBuilder.Entity("MockDoor.Data.Models.Tenant", b =>
                {
                    b.Navigation("ServiceGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
